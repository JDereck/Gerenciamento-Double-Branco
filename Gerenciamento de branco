<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Gerenciamento de Banca</title>
  <style>
    :root {
      --bg-color: #f9f9f9;
      --text-color: #333;
      --box-color: #fff;
    }

    body.dark-mode {
      --bg-color: #1e1e1e;
      --text-color: #f5f5f5;
      --box-color: #2e2e2e;
    }

    body {
      margin: 20px;
      background-color: var(--bg-color);
      color: var(--text-color);
      font-family: Arial, sans-serif;
      transition: background-color 0.3s, color 0.3s;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 700px;
      margin: auto;
    }

    h1 {
      color: var(--text-color);
      margin: 0;
    }

    .theme-toggle {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
    }

    .container {
      max-width: 700px;
      margin: 20px auto;
      background: var(--box-color);
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    label {
      font-weight: bold;
      display: block;
      margin-top: 10px;
    }

    input, select, button {
      width: 100%;
      padding: 8px;
      margin: 5px 0 15px;
      border: 1px solid #ccc;
      border-radius: 5px;
      background-color: var(--bg-color);
      color: var(--text-color);
    }

    button {
      background-color: #3498db;
      color: white;
      font-weight: bold;
      cursor: pointer;
    }

    button:hover {
      background-color: #2980b9;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: center;
    }

    th {
      background-color: #ecf0f1;
    }

    .destacado {
      background-color: #f1c40f;
      font-weight: bold;
    }

    .resultado-texto {
      background-color: #dff9fb;
      padding: 10px;
      border-radius: 5px;
      margin-top: 15px;
      font-weight: bold;
    }

    body.dark-mode .resultado-texto {
      background-color: #34495e;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Gerenciamento de Banca</h1>
    <button class="theme-toggle" onclick="toggleTheme()" id="temaBtn">üåô</button>
  </div>

  <div class="container">
    <label for="modo">Escolha o Modo de C√°lculo:</label>
    <select id="modo" onchange="renderInputs()">
      <option value="valor">Valor Desejado</option>
      <option value="entrada">N√∫mero de Jogadas</option>
      <option value="porcentagem">Porcentagem de Lucro</option>
    </select>

    <div id="inputs"></div>

    <button onclick="calcular()">Calcular</button>

    <div id="resultado"></div>
  </div>

  <script>
    const inputsDiv = document.getElementById("inputs");
    const resultadoDiv = document.getElementById("resultado");

    function toggleTheme() {
      document.body.classList.toggle("dark-mode");
      document.getElementById("temaBtn").textContent = document.body.classList.contains("dark-mode") ? "‚òÄÔ∏è" : "üåô";
    }

    function renderInputs() {
      const modo = document.getElementById("modo").value;
      let html = '';
      if (modo === 'valor') {
        html += 'Banca: <input id="banca" type="number" step="0.01">';
        html += 'Valor que deseja ganhar: <input id="ganho" type="number" step="0.01">';
        html += 'Quantidade de acertos: <input id="acertos" type="number">';
      } else if (modo === 'entrada') {
        html += 'Banca: <input id="banca" type="number" step="0.01">';
        html += 'Quantidade de jogadas desejadas: <input id="jogadas" type="number">';
      } else if (modo === 'porcentagem') {
        html += 'Banca: <input id="banca" type="number" step="0.01">';
        html += 'Porcentagem de lucro: <input id="porcentagem" type="number">';
        html += 'Quantidade de acertos: <input id="acertos" type="number">';
      }
      inputsDiv.innerHTML = html;
    }

    renderInputs();

    function calcular() {
      resultadoDiv.innerHTML = '';
      const modo = document.getElementById("modo").value;
      const banca = parseFloat(document.getElementById("banca").value);
      let linhas = [], totalAcumulado = 0, suportaJogadas = 0;
      const apostaMinima = 0.10;

      if (modo === 'valor') {
        const ganho = parseFloat(document.getElementById("ganho").value);
        const acertos = parseInt(document.getElementById("acertos").value);
        let entrada = (ganho / 13) / acertos;
        if (entrada < apostaMinima) entrada = apostaMinima;

        const lucroPorAcerto = entrada * 13;
        const lucroEsperado = lucroPorAcerto * acertos;

        for (let i = 1; i <= 200; i++) {
          if (i > 1) entrada *= 1.077;
          totalAcumulado += entrada;
          if (totalAcumulado <= banca) suportaJogadas = i;
          linhas.push({ i, entrada, total: totalAcumulado });
        }

        if (suportaJogadas === 0) {
          resultadoDiv.innerHTML = `<div class='resultado-texto'>Banca insuficiente. Banca necess√°ria: R$ ${totalAcumulado.toFixed(2)}</div>`;
          return;
        }

        resultadoDiv.innerHTML = `
          <div class='resultado-texto'>
            Lucro no acerto: R$ ${lucroPorAcerto.toFixed(2)}<br>
            Lucro esperado: R$ ${lucroEsperado.toFixed(2)}<br>
            Banca suporta at√© ${suportaJogadas} jogadas.
          </div>`;
      }
if (modo === 'entrada') {
  const jogadas = parseInt(document.getElementById("jogadas").value);
  let entradaTestada = apostaMinima, entradaAprovada = apostaMinima;
  let bancaNecessaria = 0;

  while (true) {
    let soma = 0;
    let entrada = entradaTestada;
    for (let i = 1; i <= jogadas; i++) {
      if (i > 1) entrada *= 1.077;
      soma += entrada;
    }
    if (soma <= banca) {
      entradaAprovada = entradaTestada;
      entradaTestada += 0.01;
    } else {
      bancaNecessaria = soma;
      break;
    }
  }

  let entrada = entradaAprovada;
  totalAcumulado = 0;
  let jogadasSuportadas = 0;
  const lucroPorAcerto = entrada * 13;
  const lucroEsperado = lucroPorAcerto * jogadas;

  for (let i = 1; i <= jogadas; i++) {
    if (i > 1) entrada *= 1.077;
    totalAcumulado += entrada;
    if (totalAcumulado <= banca) {
      linhas.push({ i, entrada, total: totalAcumulado });
      jogadasSuportadas++;
    } else {
      break;
    }
  }

  resultadoDiv.innerHTML = `<div class='resultado-texto'>
    Lucro no acerto: R$ ${lucroPorAcerto.toFixed(2)}<br>
    ${jogadasSuportadas < jogadas 
      ? `Banca insuficiente para ${jogadas} jogadas.<br>Banca necess√°ria: R$ ${bancaNecessaria.toFixed(2)}<br>Banca atual suporta at√© ${jogadasSuportadas} jogadas.` 
      : `Banca suporta at√© ${jogadasSuportadas} jogadas.`}
  </div>`;
}

      if (modo === 'porcentagem') {
        const porcentagem = parseFloat(document.getElementById("porcentagem").value);
        const acertos = parseInt(document.getElementById("acertos").value);
        const ganho = (banca * porcentagem) / 100;
        let entrada = (ganho / 13) / acertos;
        if (entrada < apostaMinima) entrada = apostaMinima;

        const lucroPorAcerto = entrada * 13;
        const lucroEsperado = lucroPorAcerto * acertos;

        for (let i = 1; i <= 200; i++) {
          if (i > 1) entrada *= 1.077;
          totalAcumulado += entrada;
          if (totalAcumulado <= banca) suportaJogadas = i;
          linhas.push({ i, entrada, total: totalAcumulado });
        }

        if (suportaJogadas === 0) {
          resultadoDiv.innerHTML = `<div class='resultado-texto'>Banca insuficiente. Banca necess√°ria: R$ ${totalAcumulado.toFixed(2)}</div>`;
          return;
        }

        resultadoDiv.innerHTML = `
          <div class='resultado-texto'>
            Lucro no acerto: R$ ${lucroPorAcerto.toFixed(2)}<br>
            Lucro esperado: R$ ${lucroEsperado.toFixed(2)}<br>
            Banca suporta at√© ${suportaJogadas} jogadas.
          </div>`;
      }

      let tabela = '<table><tr><th>Jogada</th><th>Valor</th><th>Acumulado</th></tr>';
      linhas.forEach(l => {
        const classe = l.i === suportaJogadas ? 'class="destacado"' : '';
        tabela += `<tr ${classe}><td>${l.i}</td><td>R$ ${l.entrada.toFixed(2)}</td><td>R$ ${l.total.toFixed(2)}</td></tr>`;
      });
      tabela += '</table>';
      resultadoDiv.innerHTML += tabela;
    }
  </script>
</body>
</html>
